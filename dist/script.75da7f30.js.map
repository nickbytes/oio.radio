{"version":3,"sources":["script.js"],"names":["document","addEventListener","event","refresh","counter","duration","giphy","baseURL","apiKey","tag","type","rating","$gif_wrap","getElementById","giphyURL","encodeURI","newGif","fetch","then","res","json","out","renderGif","data","catch","err","_giphy","querySelector","style","backgroundImage","image_original_url","refreshRate","clearInterval","setInterval","static"],"mappings":";;AAAA;;;;AAEAA,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,UAASC,KAAT,EAAgB;AAC7D;AACG,MAAIC,OAAJ;AACA,MAAIC,OAAO,GAAG,CAAd,CAH0D,CAI7D;;AACA,MAAMC,QAAQ,GAAG,OAAO,CAAxB,CAL6D,CAM7D;;AACA,MAAMC,KAAK,GAAG;AACbC,IAAAA,OAAO,EAAE,gCADI;AAEbC,IAAAA,MAAM,EAAE,kCAFK;AAGbC,IAAAA,GAAG,EAAE,QAHQ;AAIbC,IAAAA,IAAI,EAAE,QAJO;AAKbC,IAAAA,MAAM,EAAE;AALK,GAAd,CAP6D,CAc7D;;AACA,MAAMC,SAAS,GAAGZ,QAAQ,CAACa,cAAT,CAAwB,UAAxB,CAAlB,CAf6D,CAgB7D;;AACA,MAAIC,QAAQ,GAAGC,SAAS,CACvBT,KAAK,CAACC,OAAN,GACCD,KAAK,CAACI,IADP,GAEC,WAFD,GAGCJ,KAAK,CAACE,MAHP,GAIC,OAJD,GAKCF,KAAK,CAACG,GALP,GAMC,UAND,GAOCH,KAAK,CAACK,MARgB,CAAxB;;AAWG,MAAIK,MAAM,GAAG,SAATA,MAAS,GAAM;AACfC,IAAAA,KAAK,CAACH,QAAD,CAAL,CACCI,IADD,CACM,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KADT,EAECF,IAFD,CAEM,UAACG,GAAD,EAAS;AACXC,MAAAA,SAAS,CAACD,GAAG,CAACE,IAAL,CAAT;AACC,KAJL,EAKCC,KALD,CAKO,UAAAC,GAAG,EAAI;AAAE,YAAMA,GAAN;AAAW,KAL3B;AAMC,GAPL,CA5B0D,CAqC7D;;;AACA,MAAIH,SAAS,GAAG,SAAZA,SAAY,CAAAI,MAAM,EAAI;AACzB;AACA1B,IAAAA,QAAQ,CAAC2B,aAAT,CAAuB,UAAvB,EAAmCC,KAAnC,CAAyCC,eAAzC,GAA4D,UAAUH,MAAM,CAACI,kBAAjB,GAAsC,IAAlG,CAFyB,CAIzB;;AACAC,IAAAA,WAAW;AACX,GAND,CAtC6D,CA8C7D;;;AACA,MAAIA,WAAW,GAAG,SAAdA,WAAc,GAAM;AACvB;AACAC,IAAAA,aAAa,CAAC7B,OAAD,CAAb;AACAA,IAAAA,OAAO,GAAG8B,WAAW,CAAC,YAAW;AACvB7B,MAAAA,OAAO,GADgB,CAEvB;;AACA,UAAIA,OAAO,GAAG,CAAV,IAAe,CAAnB,EACIY,MAAM,GADV,KAGIhB,QAAQ,CAAC2B,aAAT,CAAuB,UAAvB,EAAmCC,KAAnC,CAAyCC,eAAzC,GAA4D,oBAAaK,eAAb,IAAwB,IAApF;AACb,KAPoB,EAOlB7B,QAPkB,CAArB;AAQA,GAXD,CA/C6D,CA4D7D;;;AACAW,EAAAA,MAAM,GA7DuD,CAgE7D;AAEA;AACA,CAnED","file":"script.75da7f30.js","sourceRoot":"../src","sourcesContent":["import static from \"./static.gif\"\n\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\n\t// Initiate gifLoop for set interval\n    var refresh;\n    let counter = 0\n\t// Duration count in seconds\n\tconst duration = 1000 * 5;\n\t// Giphy API defaults\n\tconst giphy = {\n\t\tbaseURL: \"https://api.giphy.com/v1/gifs/\",\n\t\tapiKey: \"q2YzkzhfEzjpkMNrvF5vQP2d8gWQ6rZF\",\n\t\ttag: \"trippy\",\n\t\ttype: \"random\",\n\t\trating: \"pg-13\"\n\t};\n\t// Target gif-wrap container\n\tconst $gif_wrap = document.getElementById(\"gif-wrap\");\n\t// Giphy API URL\n\tlet giphyURL = encodeURI(\n\t\tgiphy.baseURL +\n\t\t\tgiphy.type +\n\t\t\t\"?api_key=\" +\n\t\t\tgiphy.apiKey +\n\t\t\t\"&tag=\" +\n\t\t\tgiphy.tag +\n\t\t\t\"&rating=\" +\n\t\t\tgiphy.rating\n\t);\t\n\n    let newGif = () => {\n        fetch(giphyURL)\n        .then(res => res.json())\n        .then((out) => {\n            renderGif(out.data);        \n            })\n        .catch(err => { throw err });\n        }\n\n\t// Display Gif in gif wrap container\n\tvar renderGif = _giphy => {\t\t\n\t\t// Set gif as bg image\n\t\tdocument.querySelector(\".channel\").style.backgroundImage =  \"url('\" + _giphy.image_original_url + \"')\"\n\n\t\t// Start duration countdown\n\t\trefreshRate();\n\t};\n\n\t// Call for new gif after duration\n\tvar refreshRate = () => {\n\t\t// Reset set intervals\n\t\tclearInterval(refresh);\n\t\trefresh = setInterval(function() {  \n            counter++          \n            // Call Giphy API for new gif\n            if (counter % 2 == 0) \n                newGif();            \n            else         \n                document.querySelector(\".channel\").style.backgroundImage =  \"url('\" + `${static}` + \"')\"\n\t\t}, duration);\n\t};\n\n\t// Call Giphy API for new gif\n\tnewGif();\n\t\n\t\n\t// const newGifButton = document.getElementById('new-gif');\n\t\n\t// newGifButton.onclick = newGif\n});\n"]}